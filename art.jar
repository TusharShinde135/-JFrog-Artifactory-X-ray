// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>vulnerable-java-demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- Known vulnerable version of Spring Framework -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>4.3.17.RELEASE</version>
        </dependency>
        <!-- Older version of Apache Commons Collections with known vulnerabilities -->
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.1</version>
        </dependency>
        <!-- Old version of Log4j -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/com/example/VulnerableController.java
package com.example;

import org.apache.log4j.Logger;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class VulnerableController {
    private static final Logger logger = Logger.getLogger(VulnerableController.class);

    // Vulnerability 1: SQL Injection
    public void unsafeQuery(String userInput) {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/test");
            Statement stmt = conn.createStatement();
            // WARNING: Unsafe SQL query construction
            stmt.execute("SELECT * FROM users WHERE id = " + userInput);
        } catch (Exception e) {
            logger.error("Query failed", e);
        }
    }

    // Vulnerability 2: Path Traversal
    public File getFile(String fileName) {
        // WARNING: Unsafe file path handling
        return new File("/temp/" + fileName);
    }

    // Vulnerability 3: Hardcoded Credentials
    private static final String DB_PASSWORD = "admin123";
    
    public void connectToDatabase() {
        try {
            // WARNING: Hardcoded credentials
            Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost/test",
                "admin",
                DB_PASSWORD
            );
        } catch (Exception e) {
            logger.error("Connection failed", e);
        }
    }

    // Vulnerability 4: Unsafe Deserialization
    public Object deserialize(byte[] data) {
        try {
            // WARNING: Unsafe deserialization
            java.io.ObjectInputStream ois = new java.io.ObjectInputStream(
                new java.io.ByteArrayInputStream(data)
            );
            return ois.readObject();
        } catch (Exception e) {
            logger.error("Deserialization failed", e);
            return null;
        }
    }
}

// README.md
/*
# Vulnerable Java Demo Project

This project contains intentional vulnerabilities for security testing purposes only.
DO NOT USE IN PRODUCTION!

## Known Vulnerabilities:

1. SQL Injection vulnerability in query construction
2. Path Traversal vulnerability in file handling
3. Hardcoded credentials
4. Unsafe deserialization
5. Multiple vulnerable dependencies:
   - Spring Framework 4.3.17.RELEASE (CVE-2018-1271)
   - Commons Collections 3.2.1 (CVE-2015-6420)
   - Log4j 1.2.17 (Multiple CVEs)

## Build Instructions:
```
mvn clean package
```

## Security Notice:
This application is deliberately vulnerable and should only be run in isolated testing environments.
*/
